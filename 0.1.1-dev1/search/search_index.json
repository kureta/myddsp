{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MyDDSP Docs \u00b6 Reference \u00b6 MyDDSP \u00b6 48kHz, stereo DDSP based on Google Magenta's paper : You can train the model on a set of monophonic (single pitch) recordings. It also includes a real- time inference implementation. Constants module \u00b6 Constants for sample pre-processing. Preprocessors module \u00b6 Provides a few audio feature extractors. This module allows the user to extract audio features for feeding into the model. The module contains the following feature extractors: LegacyLoudness - The one I used originally. Its dynamic range is somehow compressed, and it is noisy. Loudness - Based on Loudness from torchaudio . make_divisible_by_hop_length ( y ) \u00b6 Right pads a batch of audio examples to the nearest multiple of HOP_SIZE Warning Example length cannot be zero. Examples: >>> y = torch . randn ( 1 , 2 , 48003 ) >>> y_padded = make_divisible_by_hop_length ( y ) >>> y_padded . shape [ - 1 ] % HOP_LENGTH == 0 True >>> y = torch . randn ( 1 , 2 , 0 ) >>> make_divisible_by_hop_length ( y ) Traceback (most recent call last): ... ValueError:... Parameters: Name Type Description Default y Tensor batch of examples, tensor of shape [B, C, S] required Returns: Name Type Description y_padded Tensor padded examples, tensor of shape [B, C, S] Source code in myddsp/preprocessors.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 def make_divisible_by_hop_length ( y : Tensor ) -> Tensor : \"\"\"Right pads a batch of audio examples to the nearest multiple of `HOP_SIZE` !!! warning Example length cannot be zero. Examples: >>> y = torch.randn(1, 2, 48003) >>> y_padded = make_divisible_by_hop_length(y) >>> y_padded.shape[-1] % HOP_LENGTH == 0 True >>> y = torch.randn(1, 2, 0) >>> make_divisible_by_hop_length(y) Traceback (most recent call last): ... ValueError:... Args: y: batch of examples, tensor of shape `[B, C, S]` Returns: y_padded: padded examples, tensor of shape `[B, C, S]` \"\"\" if len ( y . shape ) != 3 : raise ValueError ( \"Tensor must have exactly 3 dimensions [B, C, S]\" ) length = y . shape [ 2 ] if length <= 0 : raise ValueError ( \"Example length cannot be zero!\" ) remainder = length % HOP_LENGTH padding = HOP_LENGTH - remainder y_padded = F . pad ( y , ( 0 , padding ), mode = \"constant\" , value = 0.0 ) return y_padded phase_shuffle ( y ) \u00b6 Randomizes the phase of an audio signal. Parameters: Name Type Description Default y Tensor tensor of shape [..., S] required Returns: Name Type Description y_phase_randomized Tensor phase shuffled tensor of shape [..., S] Source code in myddsp/preprocessors.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 def phase_shuffle ( y : Tensor ) -> Tensor : \"\"\"Randomizes the phase of an audio signal. Args: y: tensor of shape `[..., S]` Returns: y_phase_randomized: phase shuffled tensor of shape `[..., S]` \"\"\" s = torch . fft . rfft ( y ) s_phase_randomized = torch . polar ( s . abs (), torch . rand_like ( s . angle ()) * 2.0 * np . pi ) y_phase_randomized = torch . fft . irfft ( s_phase_randomized ) return y_phase_randomized","title":"Welcome to MyDDSP Docs"},{"location":"#welcome-to-myddsp-docs","text":"","title":"Welcome to MyDDSP Docs"},{"location":"#reference","text":"","title":"Reference"},{"location":"#myddsp_1","text":"48kHz, stereo DDSP based on Google Magenta's paper : You can train the model on a set of monophonic (single pitch) recordings. It also includes a real- time inference implementation.","title":"MyDDSP"},{"location":"#constants-module","text":"Constants for sample pre-processing.","title":"Constants module"},{"location":"#preprocessors-module","text":"Provides a few audio feature extractors. This module allows the user to extract audio features for feeding into the model. The module contains the following feature extractors: LegacyLoudness - The one I used originally. Its dynamic range is somehow compressed, and it is noisy. Loudness - Based on Loudness from torchaudio .","title":"Preprocessors module"},{"location":"#myddsp.preprocessors.make_divisible_by_hop_length","text":"Right pads a batch of audio examples to the nearest multiple of HOP_SIZE Warning Example length cannot be zero. Examples: >>> y = torch . randn ( 1 , 2 , 48003 ) >>> y_padded = make_divisible_by_hop_length ( y ) >>> y_padded . shape [ - 1 ] % HOP_LENGTH == 0 True >>> y = torch . randn ( 1 , 2 , 0 ) >>> make_divisible_by_hop_length ( y ) Traceback (most recent call last): ... ValueError:... Parameters: Name Type Description Default y Tensor batch of examples, tensor of shape [B, C, S] required Returns: Name Type Description y_padded Tensor padded examples, tensor of shape [B, C, S] Source code in myddsp/preprocessors.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 def make_divisible_by_hop_length ( y : Tensor ) -> Tensor : \"\"\"Right pads a batch of audio examples to the nearest multiple of `HOP_SIZE` !!! warning Example length cannot be zero. Examples: >>> y = torch.randn(1, 2, 48003) >>> y_padded = make_divisible_by_hop_length(y) >>> y_padded.shape[-1] % HOP_LENGTH == 0 True >>> y = torch.randn(1, 2, 0) >>> make_divisible_by_hop_length(y) Traceback (most recent call last): ... ValueError:... Args: y: batch of examples, tensor of shape `[B, C, S]` Returns: y_padded: padded examples, tensor of shape `[B, C, S]` \"\"\" if len ( y . shape ) != 3 : raise ValueError ( \"Tensor must have exactly 3 dimensions [B, C, S]\" ) length = y . shape [ 2 ] if length <= 0 : raise ValueError ( \"Example length cannot be zero!\" ) remainder = length % HOP_LENGTH padding = HOP_LENGTH - remainder y_padded = F . pad ( y , ( 0 , padding ), mode = \"constant\" , value = 0.0 ) return y_padded","title":"make_divisible_by_hop_length()"},{"location":"#myddsp.preprocessors.phase_shuffle","text":"Randomizes the phase of an audio signal. Parameters: Name Type Description Default y Tensor tensor of shape [..., S] required Returns: Name Type Description y_phase_randomized Tensor phase shuffled tensor of shape [..., S] Source code in myddsp/preprocessors.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 def phase_shuffle ( y : Tensor ) -> Tensor : \"\"\"Randomizes the phase of an audio signal. Args: y: tensor of shape `[..., S]` Returns: y_phase_randomized: phase shuffled tensor of shape `[..., S]` \"\"\" s = torch . fft . rfft ( y ) s_phase_randomized = torch . polar ( s . abs (), torch . rand_like ( s . angle ()) * 2.0 * np . pi ) y_phase_randomized = torch . fft . irfft ( s_phase_randomized ) return y_phase_randomized","title":"phase_shuffle()"}]}